components library that we will be using is:
shadcn/ui
https://ui.shadcn.com/ (built on top of Radix Ui)
{since we are using next.js -> https://ui.shadcn.com/docs/installation/next}

we can create new layouts only for a specific route root:
inside the (root) folder, we create layout.tsx, which would be similar to the last one (used for the app folder), so we export the same code. 

shared folder is created, that stores the header and footer which would be used in various pages of the site, hence shared.

for authentication of the user, we will be using clerk:
https://clerk.com/docs/quickstarts/nextjs (follow the steps here)

after this we setup the login button linking it with clerk using the SignedOut from clerk/nextjs, that we added in the Header.js

now we add app -> (auth) -> sign-in -> [[...sign-in]] -> page.tsx, where we add SignIn component from clerk/nextjs (same for the sign-up), these will be used to create custom signin signup pages:
https://clerk.com/docs/references/nextjs/custom-signup-signin-pages

now to give our own styling using classname="" to the custom sign-in and sign-up pages we can create layout.tsx under (auth) folder with code:

  const Layout = ({ children }: { children: React.ReactNode }) => {
  return (
    <div classname='{the styling goes here}'>
      {children}
    </div>
  )
}

next, clerk also allows us to enter username, after that we test a user login or signup

after login the LoginButton is auto hidden by the <SignedOut> component of clerk in Header, reffering to as the user has now logged in to the website and hence no login required

once login is done, we want to display the icon of the loggedin user in the Header and also the menu to change or log out the user, this is done by adding the:
<SignedIn>
  <UserButton afterSignOutUrl='/'>
<SignedIn/> 
all from the clerk/nextjs 

creating navitems menu for laptop devices: (NavItems, will go in shared folder)
and (MobileNav, for mobile devices)
for each we wrap them in the SignIn component of clerk, as code updated in Header.tsx

for MobileNav: using shadcn component -> Sheet 
  npx shadcn-ui@latest add sheet
  doc to follow : https://ui.shadcn.com/docs/components/sheet 

now we add the image for the MobileNav, replacing the text Open with Image component from nextjs

fixing/styling the bg and color of the side menu in SheetContent, add Separator component from shadcn : npx shadcn-ui@latest add separator

actually adding the navitems to be displayed in both device orientations:
create a folder on root directory : constants (that always remain the same)

fetching the code for index.ts from the repo and updating the NavItems.tsx

and styling the active path of nav item, using the 'use client' -> pathname hook from nextjs/navigation 

now we impliment the home page (i.e the page.tsx in (root) folder, under app folder)

added the home (hero) section, hero text, p tag, button and hero image in a section and creating other section for adding the list of events 

now we will connect the backend using MongoDB
starting with creating database folder under lib folder and adding two more dependencies -> mongoose and mongodb 
npm install mongoose mongodb

let cached = mongoose || {conn: null, promise: null}
// that is to check of there is any cached mongoose already, and if not we set the connection and promise to null and start anew

(global as any). used to know that we are refering to the global time of mongoose.

we will be using mongodb atlas as our database. 
https://www.mongodb.com/atlas 
create a new project there with a name then inside the database tab we 'Build a Database'

create a user there providing username and password and remember them for later.
-> your ip address will be added automatically under the network access tab but we have to had the entry of 'access from anywhere' (0000/0) too.

next head to overview and select connect -> drivers and we will use the string to connect to the database we created. 

-> mongodb+srv://aaryancodes:<password>@cluster0.ndzleox.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

more explanation is present in the respected code file.

next we create a model in the database for users -> models (folder) -> user.model.ts

next we do the same thing to create a model for events 
-> models -> event.model.ts

// to know which properties does this model have: we will use Chat GPT to ask 
// fill in the IEvent based of of the event schema

webhook - (hooking up clerk, as soon as the clerk accoun is created with database user)
webhook is an event trigger
when something happens -> trigger something -> make a req -> process that event 

https://clerk.com/docs/integrations/webhooks/sync-data#sync-clerk-data-to-your-backend-with-webhooks
[STEP 1 IS SKIPPED HERE AND WILL BE DONE AFTER OU PAGE HAS BEEN DEPLOYED ]

we will be adding npm install svix first, then creating App Router under 
app/api/webhook/clerk/route.ts and copying the entire code from there.

from the last section of the code  (line 50) we can pull all the information of a perticular event (here, that being creation of a user).

once we have fetched the user, we can do something with them, maybe perform an action, so we create those actions in the: 
lib folder -> actions -> user.actions.ts (it is a nextjs server action file so it will run on a server) ('use server' on top)

we have to define the type of data wwe are passing, which is done by:
new folder in root directory -> types -> index.ts (code from github)

async ( user: CreateUserParams ) 

for error handling in try catch block, we add the utils for it in the utils.ts file.

with all the utils added, we add the query-string library in the dev env:
npm install query-string

then in the route.js we create what happens/how to work on actions such as 
updateUser, deleteUser, updateUser

for all the other user actions, we create new models for various user actions.
such as category.model.ts and order.models.ts (code from github)

a good point to deploy the website in development, so next we can add the webhooks from clerk.

WE ALWAYS HAVE TO REDEPLOY TO PRODUCTION, IF WE ADD A NEW ENVIRONMENT VARIABLE.

--------------------------------------------------------------

AHHH TOOK HOURS TO FIX THIS TWT: 

before this, in the Email, Phone, Username tab, need to enable 'always add first and last name from the user' then redeploy the application.

THE USER LOGGIN IN THROUGH CLERK MUST HAVE BOTH THE FIRST AND LAST NAME IN THERE ACCOUNT (it may be gmail or github or any), only then the data will be stored in the backend mongoDB, because its mandatory for the db to recieve both of them, in order for it to consider it a valid user. 

---------------------------------------------------------------


components library that we will be using is:
shadcn/ui
https://ui.shadcn.com/ (built on top of Radix Ui)
{since we are using next.js -> https://ui.shadcn.com/docs/installation/next}

we can create new layouts only for a specific route root:
inside the (root) folder, we create layout.tsx, which would be similar to the last one (used for the app folder), so we export the same code. 

shared folder is created, that stores the header and footer which would be used in various pages of the site, hence shared.

for authentication of the user, we will be using clerk:
https://clerk.com/docs/quickstarts/nextjs (follow the steps here)

after this we setup the login button linking it with clerk using the SignedOut from clerk/nextjs, that we added in the Header.js

now we add app -> (auth) -> sign-in -> [[...sign-in]] -> page.tsx, where we add SignIn component from clerk/nextjs (same for the sign-up), these will be used to create custom signin signup pages:
https://clerk.com/docs/references/nextjs/custom-signup-signin-pages

now to give our own styling using classname="" to the custom sign-in and sign-up pages we can create layout.tsx under (auth) folder with code:

  const Layout = ({ children }: { children: React.ReactNode }) => {
  return (
    <div classname='{the styling goes here}'>
      {children}
    </div>
  )
}

next, clerk also allows us to enter username, after that we test a user login or signup

after login the LoginButton is auto hidden by the <SignedOut> component of clerk in Header, reffering to as the user has now logged in to the website and hence no login required

once login is done, we want to display the icon of the loggedin user in the Header and also the menu to change or log out the user, this is done by adding the:
<SignedIn>
  <UserButton afterSignOutUrl='/'>
<SignedIn/> 
all from the clerk/nextjs 

creating navitems menu for laptop devices: (NavItems, will go in shared folder)
and (MobileNav, for mobile devices)
for each we wrap them in the SignIn component of clerk, as code updated in Header.tsx

for MobileNav: using shadcn component -> Sheet 
  npx shadcn-ui@latest add sheet
  doc to follow : https://ui.shadcn.com/docs/components/sheet 

now we add the image for the MobileNav, replacing the text Open with Image component from nextjs

fixing/styling the bg and color of the side menu in SheetContent, add Separator component from shadcn : npx shadcn-ui@latest add separator

actually adding the navitems to be displayed in both device orientations:
create a folder on root directory : constants (that always remain the same)

fetching the code for index.ts from the repo and updating the NavItems.tsx

and styling the active path of nav item, using the 'use client' -> pathname hook from nextjs/navigation 

now we impliment the home page (i.e the page.tsx in (root) folder, under app folder)

added the home (hero) section, hero text, p tag, button and hero image in a section and creating other section for adding the list of events 

now we will connect the backend using MongoDB
starting with creating database folder under lib folder and adding two more dependencies -> mongoose and mongodb 
npm install mongoose mongodb

let cached = mongoose || {conn: null, promise: null}
// that is to check of there is any cached mongoose already, and if not we set the connection and promise to null and start anew

(global as any). used to know that we are refering to the global time of mongoose.

we will be using mongodb atlas as our database. 
https://www.mongodb.com/atlas 
create a new project there with a name then inside the database tab we 'Build a Database'

create a user there providing username and password and remember them for later.
-> your ip address will be added automatically under the network access tab but we have to had the entry of 'access from anywhere' (0000/0) too.

next head to overview and select connect -> drivers and we will use the string to connect to the database we created. 

-> mongodb+srv://aaryancodes:<password>@cluster0.ndzleox.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

more explanation is present in the respected code file.

next we create a model in the database for users -> models (folder) -> user.model.ts

next we do the same thing to create a model for events 
-> models -> event.model.ts

// to know which properties does this model have: we will use Chat GPT to ask 
// fill in the IEvent based of of the event schema

webhook - (hooking up clerk, as soon as the clerk accoun is created with database user)
webhook is an event trigger
when something happens -> trigger something -> make a req -> process that event 

https://clerk.com/docs/integrations/webhooks/sync-data#sync-clerk-data-to-your-backend-with-webhooks

https://clerk.com/docs/integrations/webhooks/sync-data

[STEP 1 IS SKIPPED HERE AND WILL BE DONE AFTER OU PAGE HAS BEEN DEPLOYED ]

we will be adding npm install svix first, then creating App Router under 
app/api/webhook/clerk/route.ts and copying the entire code from there.

from the last section of the code  (line 50) we can pull all the information of a perticular event (here, that being creation of a user).

once we have fetched the user, we can do something with them, maybe perform an action, so we create those actions in the: 
lib folder -> actions -> user.actions.ts (it is a nextjs server action file so it will run on a server) ('use server' on top)

we have to define the type of data wwe are passing, which is done by:
new folder in root directory -> types -> index.ts (code from github)

async ( user: CreateUserParams ) 

for error handling in try catch block, we add the utils for it in the utils.ts file.

with all the utils added, we add the query-string library in the dev env:
npm install query-string

then in the route.js we create what happens/how to work on actions such as 
updateUser, deleteUser, updateUser

for all the other user actions, we create new models for various user actions.
such as category.model.ts and order.models.ts (code from github)

a good point to deploy the website in development, so next we can add the webhooks from clerk.

WE ALWAYS HAVE TO REDEPLOY TO PRODUCTION, IF WE ADD A NEW ENVIRONMENT VARIABLE.

--------------------------------------------------------------

AHHH TOOK HOURS TO FIX THIS TWT: 

before this, in the Email, Phone, Username tab, need to enable 'always add first and last name from the user' then redeploy the application.

THE USER LOGGIN IN THROUGH CLERK MUST HAVE BOTH THE FIRST AND LAST NAME IN THERE ACCOUNT (it may be gmail or github or any), only then the data will be stored in the backend mongoDB, because its mandatory for the db to recieve both of them, in order for it to consider it a valid user. 

---------------------------------------------------------------

Now we will work on the front end part of the application, focusing on events:

(root) -> events -> create -> page.tsx

note: if we have json elements inside return (), we have to wrap them in <></>

now we will create EventForm which goes under:
(since the form can be reused again)
components -> shared -> EventForm.tsx 

EventForm will be use client as it will handle the user clicks of mouse and keyboard, to enter the event form. vs. the create Event page will be rendered as server side.

now we need to provide the user detail/id as in who is entering the details, which can be fetched from a hook auth() from clerk.

for EventForm to recieve data, we need props which will be added to EventForm.tsx file.

similarly, we create a page to update the event details of a user: 

events -> create -> [id] -> update -> page.tsx

we will use shadcn form component: 
npx shadcn-ui@latest add form
https://ui.shadcn.com/docs/components/form#installation

while follwing the steps, we need to install: 
  npx shadcn-ui@latest add input

since event form is gonna get bigger, we will move 
zod verification to a seperate file in: 
lib -> validator.ts 

inside this file, we create our own form with various entries, like location, imageUrl, price, description and more.. which is then imported inside the eventForm

now we will add the drop down functionality to the eventform: 
for that we need a list of otions to select from in the dropdown, which can be added by:
npx shadcn-ui@latest add select

then follow the steps here: 
https://ui.shadcn.com/docs/components/select

we will be creating categories dynamically -> for that we need the useState hook from react.

for users to be able to add there own category (dynamically) we will create a dialog box, which can be creaded by dialog from shadcn

npx shadcn-ui@latest add dialog

then follow along here: 
https://ui.shadcn.com/docs/components/dialog

then we add various styling to the divs and add functionalities of onClick() on the add button using the useState hooks as, updated in the code.

(will work more later on the Dropdown menu)

next in the EventForm, we will add a field for description.
we will need a text area for description: can be added from shadcn
https://ui.shadcn.com/docs/components/textarea using 

npx shadcn-ui@latest add textarea

next we will add a field to enter file uploads (for imageUrl) which can be implimented easily using uploadthing

https://docs.uploadthing.com/getting-started/appdir

get the api keys from here: https://uploadthing.com/dashboard/5i56l76eev/api-keys
and add them to the env.local file

after that we create files and follow the documentations, creating 
uploadthing in lib folder, and 
FileUploader in shared folder (cold of FileUploader from github), 
accordingly, updating EventForm.tsx

now we want to add icons for the entry fields, for that we create a new div in the eventform file:

for date entriees : we will need a date picker 
https://www.npmjs.com/package/react-datepicker

npm install react-datepicker --save

next we impliment price and isFree tag too, and for a checkerbox, we will use shadcn again: 
https://ui.shadcn.com/docs/components/checkbox

npx shadcn-ui@latest add checkbox


now we test the submit form function onSubmit, if it actually works and sends back the user entered data from the front end.

inspect the local run dev website after clicking create event and check if an Object containing all the information from the fieds of the form is collected. 


now we will work on the event category to set it dynamically: 

to create the ability to add categories, we can create a new actions file in:
lib -> actions -> category.actions.ts 

the following actions: creating new category and getting/fetching all the categories from the database are the two export functions created here.

these will later be used in Dropdown.tsx under handleAddCategory function

now when user creates a new category, it will be stored in the Category database model and will be saved

this will be linked to onSubmit later.

similarly we create event.actions.ts in lib -> actions -> event.actions.ts

after all the setup of linking user side with server side(database) :

on clicking the submit button -> the form will initiate onSubmit -> onSubmit will call the server action of createEvent -> which will connectToDatabase, figure out if we have an organiser -> finally create an event through the database

might encounter a userId error, 
https://clerk.com/docs/backend-requests/making/custom-session-token


next we will crete the events page, to display all the events on the website

app -> (root) -> events -> [id] 

this is where the event we just created, having a unique ._id, we will be redirected to after submitting is finished and form resets. 

to access the params, we just have to enter props as 
({ params: { id }}) 
[its going to have the same name as how we created the folder i.e [id] folder ]


we have to add uploadthing server in the next.config.js and add it as a trusted source of image provider.

ADDING all the styling and form details one by one in the page.tsx of the events -> [id] -> page.tsx to get the information displayed on the front end.

next we want to showcase the events on the home page as a collection se we create a new component for it in 

shared -> Collection.tsx

for fetching all the events we have to create a getallEvents function under the event.action.ts

which will later be used to fetch all the events to be displayed on the home page.tsx

and we begin to add components to our home page, we start with Card component:

components -> shared -> Card.tsx

after the Card component is finished in the making, we will add a Delete Comformation Button for the events and add it inside Card component as a component.

components -> shared -> DeleteConfirmation.tsx

for this we will again use shadcn (used before here)
https://ui.shadcn.com/docs/components/alert-dialog

npx shadcn-ui@latest add alert-dialog

will now add deleteEvent action in the event.action.tsx 

adding some more event actions from the github

updated the updateEvent page for users to update their existing event 

next will work on related events sections

next we will be working on profile, creating:

app -> (root) -> profile -> page.tsx

now we will be implimenting the ability of the users to by the event tickets and we start by having to display a buy now button by editing in: 

app -> (root) -> events -> [id] -> page.tsx

creating a new component CheckoutButton.rsx in shared -> components folder

IN ORDER TO PURCHASE, we need to be signed in which can be checked by the SignedOut component of clerk

now after setting up the checkout button, we need to impliment payment infrastructure into the app, which can be done by the help of stripe
https://stripe.com/

then after creating account we head to the docs: 
https://docs.stripe.com/checkout/quickstart

npm install @stripe/stripe-js 

checkoutOrder is an action related to the order, so we will add this action/function in the lib -> actions -> order.actions.ts file 

have to change the currency to inr, since according to the indian regulations, you need to be a partnershiped comany or enthusiast, in order to accept usd payments (this edit was done in order.actions.ts)

now we want the user perchased events to be displayed on their profile page 
and want to store the order details in the database, so we can retrieve it later as per requirement. For this we will be using strive webhooks (once the checkout is exceeded or failed)

https://dashboard.stripe.com/test/webhooks

-> add an endpoint 
endpoint url -> https://eventlio.vercel.app/api/webhook/stripe

get the Signing secret and copy it and add to env.local

next we go to app -> api -> webhook -> stripe -> route.ts 
then we modify the route,ts from nodejs to nextjs route
(get the code from github)

next we create a new action createOrder in order.actions.ts (linking over order details to be updated on the backend database as well )

the india location problem persists: 
https://support.stripe.com/questions/failed-international-payments-from-stripe-accounts-in-india

[WILL FIND SOLUTION FOR THIS LATER]

adding two more exports to the order.actions.ts to access the database for user orders.

uncommenting the section of code left in the profile page.tsx to show the bought events of the users 

in order to search different pages:
we add searchparams in props and update the total pages

next we will be implimenting order details page, which the user can access from the myProfile -> hostedEvents section



